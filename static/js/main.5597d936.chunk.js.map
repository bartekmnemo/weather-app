{"version":3,"sources":["components/TopPanel.js","components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["TopPanel","Form","props","type","value","onChange","change","placeholder","id","name","countryID","onClick","click","Result","string","all","iconImage","date","timezone","country","city","sunrise","sunset","temp","wind_speed","feels_like","temp_min","temp_max","humidity","pressure","weather_main","wind_deg","weather_description","error","errorId","errorMessage","content","Date","toLocaleTimeString","windKM","Math","round","className","charAt","toUpperCase","slice","src","alt","message","ApiKey","App","state","handleValueChange","e","target","setState","handleCityClick","preventDefault","API","fetch","then","response","status","json","Error","data","time","toLocaleString","weatherIndex","weather","length","prevState","icon","sys","main","wind","speed","deg","description","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5597d936.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TopPanel.css'\r\n\r\nconst TopPanel = () => {\r\n    return ( \r\n        <nav>\r\n            <h1>Weather App by Bartosz Zięcina</h1>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default TopPanel;","import React from 'react';\r\nimport './Form.css'\r\n\r\nconst Form = props => {\r\n    return ( \r\n        <form>\r\n            <input type=\"text\" value={props.value} onChange={props.change} placeholder=\"enter a city name...\" />\r\n            <select id=\"countries\" name=\"country\" value={props.countryID} onChange={props.change}>\r\n                <option value=\"af\">Afrikaans</option>\r\n                <option value=\"al\">Albanian</option>\r\n                <option value=\"ar\">Arabic</option>\r\n                <option value=\"az\">Azerbaijani</option>\r\n                <option value=\"bg\">Bulgarian</option>\r\n                <option value=\"ca\">Catalan</option>\r\n                <option value=\"cz\">Czech</option>\r\n                <option value=\"da\">Danish</option>\r\n                <option value=\"de\">German</option>\r\n                <option value=\"el\">Greek</option>\r\n                <option value=\"en\">English</option>\r\n                <option value=\"eu\">Basque</option>\r\n                <option value=\"fa\">Persian (Farsi)</option>\r\n                <option value=\"fi\">Finnish</option>\r\n                <option value=\"fr\">French</option>\r\n                <option value=\"gl\">Galician</option>\r\n                <option value=\"he\">Hebrew</option>\r\n                <option value=\"hi\">Hindi</option>\r\n                <option value=\"hr\">Croatian</option>\r\n                <option value=\"hu\">Hungarian</option>\r\n                <option value=\"id\">Indonesian</option>\r\n                <option value=\"it\">Italian</option>\r\n                <option value=\"ja\">Japanese</option>\r\n                <option value=\"kr\">Korean</option>\r\n                <option value=\"la\">Latvian</option>\r\n                <option value=\"lt\">Lithuanian</option>\r\n                <option value=\"mk\">Macedonian</option>\r\n                <option value=\"no\">Norwegian</option>\r\n                <option value=\"nl\">Dutch</option>\r\n                <option value=\"pl\">Polish</option>\r\n                <option value=\"pt\">Portuguese</option>\r\n                <option value=\"pt_br\">Português Brasil</option>\r\n                <option value=\"ro\">Romanian</option>\r\n                <option value=\"ru\">Russian</option>\r\n                <option value=\"sv\">Swedish</option>\r\n                <option value=\"sk\">Slovak</option>\r\n                <option value=\"sl\">Slovenian</option>\r\n                <option value=\"sp\">Spanish</option>\r\n                <option value=\"sr\">Serbian</option>\r\n                <option value=\"th\">Thai</option>\r\n                <option value=\"tr\">Turkish</option>\r\n                <option value=\"ua\">Ukrainian</option>\r\n                <option value=\"vi\">Vietnamese</option>\r\n                <option value=\"zh_cn\">Chinese Simplified</option>\r\n                <option value=\"zh_tw\">Chinese Traditional</option>\r\n                <option value=\"zu\">Zulu</option>\r\n            </select>\r\n            <button onClick={props.click}>Enter</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n    const {value, iconImage, date, timezone, country, city, sunrise, sunset ,temp ,feels_like ,temp_min ,temp_max ,humidity ,pressure ,wind_speed ,wind_deg ,weather_main ,weather_description ,error, errorId, errorMessage } = props.all\r\n    let content = null\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n      }\r\n    if(!error && city){\r\n        const sunriseTime = new Date((sunrise + timezone - 7200)  * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date((sunset + timezone - 7200) * 1000).toLocaleTimeString();\r\n        const windKM = Math.round((wind_speed / 1000) * 3600)\r\n        content = (\r\n            <div className=\"result\">\r\n            <div className=\"mainInfos\"><h3>Search results for <em>{capitalizeFirstLetter(city)}</em> ({country}) </h3> {<img src={iconImage} alt=\"weather_icon\"/>}</div>\r\n            <h4>The current day and time: {date}</h4>\r\n            <h4>Temperature: {temp}&#176;C </h4>\r\n            <h4>Weather conditions: {weather_main}, details: {weather_description}</h4> \r\n            <h4>Wind speed: {windKM} km/h</h4>\r\n        </div>\r\n        )\r\n    }\r\n    return ( \r\n        <>\r\n             {errorId ? <p className=\"errorMessage\">{errorMessage.message}: <span className=\"errorTitle\">{value}</span></p> : content}\r\n        </>\r\n     );\r\n}\r\n\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport TopPanel from './TopPanel';\nimport Form from './Form'\nimport Result from './Result'\nimport './App.css';\n\n// API from https://home.openweathermap.org\nconst ApiKey = \"c84b8f5c077147fb55d9a448295d1fe7\"\n\nclass App extends Component {\n  state = { \n    value: '',\n    countryID: 'en',\n    iconImage: '',\n    date: '',\n    timezone: '',\n    country: '',\n    city: '',\n    sunrise: '',\n    sunset: '', \n    temp: '',\n    feels_like: '',\n    temp_min: '',\n    temp_max: '',\n    humidity: '',\n    pressure: '', \n    wind_speed: '',\n    wind_deg: '',\n    weather_main: '',\n    weather_description: '',\n    error: false,\n    errorId: '',\n    errorMessage: ''\n   }\n\n\n  handleValueChange = e => {\n    if(e.target.type === 'text')\n    {\n      this.setState({\n        value: e.target.value,\n        errorId: ''\n      })\n    } else if (e.target.type === 'select-one'){\n      this.setState({\n        countryID: e.target.value,\n        errorId: ''\n      })\n    }\n   \n    \n  }\n\n  handleCityClick = e => {\n    e.preventDefault()\n    const city = this.state.value\n\n    //Fahrenheit: units=imperial\n    //Celsius: units=metric\n    \n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${city},${this.state.countryID}&appid=${ApiKey}&units=metric`\n    fetch(API)\n    .then( response => {\n      if(response.status === 200) {\n        return response.json()\n      }else if (response.status === 404){\n        this.setState({\n          errorId: 1\n        })\n        throw Error(`Incorrect city name`)\n      }else if (response.status === 500){\n        this.setState({\n          errorId: 2\n        })\n        throw Error(`The request was not completed due to an internal error on the server side.`)\n      }\n      \n      })\n    .then( data => {  \n      const time = new Date().toLocaleString()\n      const weatherIndex = data.weather.length - data.weather.length\n      this.setState( prevState => ({\n        value: '',\n        iconImage: `http://openweathermap.org/img/wn/${data.weather[weatherIndex].icon}@2x.png`,\n        date: time,\n        timezone: data.timezone,\n        country: data.sys.country,\n        city: data.name,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset, \n        temp: data.main.temp,\n        feels_like: data.main.feels_like,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        pressure: data.main.pressure, \n        wind_speed: data.wind.speed,\n        wind_deg: data.wind.deg,\n        weather_main: data.weather[weatherIndex].main,\n        weather_description: data.weather[weatherIndex].description,\n        error: false\n      }))\n    })\n    .catch (err => {\n      this.setState({\n        error: true,\n        errorMessage: err\n      })\n    })\n  }\n\n  render() { \n    return ( \n      <div className=\"app\">\n        <TopPanel />\n        <Form value={this.state.value} change={this.handleValueChange} click={this.handleCityClick} countryID={this.state.countryID}/>\n        <Result all={this.state}/>\n      </div>\n     );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}