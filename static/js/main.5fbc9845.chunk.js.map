{"version":3,"sources":["components/TopPanel.js","components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["TopPanel","Form","props","type","value","onChange","change","placeholder","onClick","click","Result","string","all","date","timezone","country","city","sunrise","sunset","temp","pressure","feels_like","temp_min","temp_max","humidity","wind_speed","weather_main","wind_deg","weather_description","error","content","celcTemp","Math","round","sunriseTime","Date","toLocaleTimeString","sunsetTime","windKM","className","charAt","toUpperCase","slice","ApiKey","App","state","handleValueChange","e","setState","target","handleCityClick","preventDefault","API","fetch","then","response","ok","json","Error","data","time","toLocaleString","weatherIndex","weather","length","console","log","prevState","sys","name","main","wind","speed","deg","description","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fbc9845.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TopPanel.css'\r\n\r\nconst TopPanel = () => {\r\n    return ( \r\n        <nav>\r\n            <h1>Weather App by Bartosz ZiÄ™cina</h1>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default TopPanel;","import React from 'react';\r\nimport './Form.css'\r\n\r\nconst Form = props => {\r\n    return ( \r\n        <form>\r\n            <input type=\"text\" value={props.value} onChange={props.change} placeholder=\"enter a city name...\"/>\r\n            <button onClick={props.click}>Enter</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n    const {value, date, timezone, country, city, sunrise, sunset ,temp ,feels_like ,temp_min ,temp_max ,humidity ,pressure ,wind_speed ,wind_deg ,weather_main ,weather_description , error} = props.all\r\n    let content = null\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n      }\r\n    if(!error && city){\r\n        const celcTemp = Math.round(temp - 273.15)\r\n        const sunriseTime = new Date((sunrise + timezone - 7200)  * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date((sunset + timezone - 7200) * 1000).toLocaleTimeString();\r\n        const windKM = Math.round((wind_speed / 1000) * 3600)\r\n        content = (\r\n            <div className=\"result\">\r\n            <h3>Search results for <em>{capitalizeFirstLetter(city)}</em> ({country})</h3>\r\n            <h4>The current day and time: {date}</h4>\r\n            <h4>Temperature: {celcTemp} &#176;C </h4>\r\n            <h4>Weather conditions: {weather_main}, details: {weather_description}</h4> \r\n            <h4>Sunrise today at: {sunriseTime}</h4>\r\n            <h4>Sunset today at: {sunsetTime}</h4>\r\n            <h4>Wind speed: {windKM} km/s</h4>\r\n            <h4>Pressure: {pressure} hPa</h4>\r\n        </div>\r\n        )\r\n    }\r\n    return ( \r\n        <>\r\n             {error ? <p>Incorrect city name: <span>{value}</span></p> : content}\r\n        </>\r\n     );\r\n}\r\n\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport TopPanel from './TopPanel';\nimport Form from './Form'\nimport Result from './Result'\nimport './App.css';\n\n// API from https://home.openweathermap.org\nconst ApiKey = \"c84b8f5c077147fb55d9a448295d1fe7\"\n\nclass App extends Component {\n  state = { \n    value: '',\n    date: '',\n    timezone: '',\n    country: '',\n    city: '',\n    sunrise: '',\n    sunset: '', \n    temp: '',\n    feels_like: '',\n    temp_min: '',\n    temp_max: '',\n    humidity: '',\n    pressure: '', \n    wind_speed: '',\n    wind_deg: '',\n    weather_main: '',\n    weather_description: '',\n    error: false\n   }\n\n\n  handleValueChange = e => {\n    this.setState({\n      value: e.target.value,\n    })\n  }\n\n  handleCityClick = e => {\n    e.preventDefault()\n    const city = this.state.value\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${ApiKey}`\n    fetch(API)\n    .then( response => {\n      if(response.ok) {\n        return response.json()\n      }\n      throw Error(`Incorrect city name`)\n      })\n    .then( data => {\n      const time = new Date().toLocaleString()\n      const weatherIndex = data.weather.length - data.weather.length\n      console.log(time)\n      this.setState( prevState => ({\n        date: time,\n        timezone: data.timezone,\n        country: data.sys.country,\n        city: data.name,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset, \n        temp: data.main.temp,\n        feels_like: data.main.feels_like,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        pressure: data.main.pressure, \n        wind_speed: data.wind.speed,\n        wind_deg: data.wind.deg,\n        weather_main: data.weather[weatherIndex].main,\n        weather_description: data.weather[weatherIndex].description,\n        error: false\n      }))\n    })\n    .catch (err => {\n      console.log(err)\n      this.setState({\n        error: true\n      })\n    })\n    console.log(this.state.city)\n  }\n\n  render() { \n    return ( \n      <div className=\"app\">\n        <TopPanel />\n        <Form value={this.state.value} change={this.handleValueChange} click={this.handleCityClick}/>\n        <Result all={this.state}/>\n      </div>\n     );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}