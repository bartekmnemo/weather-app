{"version":3,"sources":["components/TopPanel.js","components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["TopPanel","Form","props","type","value","onChange","change","placeholder","onClick","click","Result","string","all","date","timezone","country","city","sunrise","sunset","temp","wind_speed","feels_like","temp_min","temp_max","humidity","pressure","weather_main","wind_deg","weather_description","error","errorId","errorMessage","content","celcTemp","Math","round","windKM","Date","toLocaleTimeString","className","charAt","toUpperCase","slice","message","ApiKey","App","state","handleValueChange","e","setState","target","handleCityClick","preventDefault","API","fetch","then","response","status","json","Error","data","time","toLocaleString","weatherIndex","weather","length","prevState","sys","name","main","wind","speed","deg","description","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAWeA,EARE,WACb,OACI,8BACI,wECMGC,G,MATF,SAAAC,GACT,OACI,iCACI,uBAAOC,KAAK,OAAOC,MAAOF,EAAME,MAAOC,SAAUH,EAAMI,OAAQC,YAAY,yBAC3E,wBAAQC,QAASN,EAAMO,MAAvB,wBCyBGC,G,MA7BA,SAAAR,GACX,IAE+BS,EAF/B,EAAkNT,EAAMU,IAAjNR,EAAP,EAAOA,MAAOS,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,QAASC,EAAvC,EAAuCA,KAAMC,EAA7C,EAA6CA,QAASC,EAAtD,EAAsDA,OAAQC,EAA9D,EAA8DA,KAA0DC,GAAxH,EAAoEC,WAApE,EAAgFC,SAAhF,EAA0FC,SAA1F,EAAoGC,SAApG,EAA8GC,SAA9G,EAAwHL,YAAsBM,GAA9I,EAAoIC,SAApI,EAA8ID,cAAcE,EAA5J,EAA4JA,oBAAqBC,EAAjL,EAAiLA,MAAOC,EAAxL,EAAwLA,QAASC,EAAjM,EAAiMA,aAC7LC,EAAU,KAId,IAAIH,GAASb,EAAK,CACd,IAAMiB,EAAWC,KAAKC,MAAMhB,EAAO,QAG7BiB,GAFc,IAAIC,KAAoC,KAA9BpB,EAAUH,EAAW,OAAewB,qBAC/C,IAAID,KAAkC,KAA5BnB,EAASJ,EAAW,OAAcwB,qBAChDJ,KAAKC,MAAOf,EAAa,IAAQ,OAChDY,EACI,sBAAKO,UAAU,SAAf,UACA,qDAAuB,8BAVA5B,EAU2BK,EAT/CL,EAAO6B,OAAO,GAAGC,cAAgB9B,EAAO+B,MAAM,MASjD,KAAgE3B,EAAhE,OACA,4DAA+BF,KAC/B,+CAAkBoB,EAAlB,YACA,sDAAyBP,EAAzB,cAAkDE,KAClD,8CAAiBQ,EAAjB,cAIR,OACI,mCACMN,EAAU,oBAAGS,UAAU,eAAb,UAA6BR,EAAaY,QAA1C,IAAmD,sBAAMJ,UAAU,aAAhB,SAA8BnC,OAAoB4B,MCnBvHY,G,MAAS,oCAiGAC,E,4MA9FbC,MAAQ,CACN1C,MAAO,GACPS,KAAM,GACNC,SAAU,GACVC,QAAS,GACTC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNE,WAAY,GACZC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVL,WAAY,GACZO,SAAU,GACVD,aAAc,GACdE,oBAAqB,GACrBC,OAAO,EACPC,QAAS,GACTC,aAAc,I,EAIhBgB,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZ7C,MAAO4C,EAAEE,OAAO9C,MAChB0B,QAAS,M,EAIbqB,gBAAkB,SAAAH,GAChBA,EAAEI,iBACF,IAAMpC,EAAO,EAAK8B,MAAM1C,MAClBiD,EAAG,4DAAwDrC,EAAxD,kBAAsE4B,GAC/EU,MAAMD,GACLE,MAAM,SAAAC,GACL,GAAuB,MAApBA,EAASC,OACV,OAAOD,EAASE,OACZ,GAAwB,MAApBF,EAASC,OAIjB,MAHA,EAAKR,SAAS,CACZnB,QAAS,IAEL6B,MAAM,uBACR,GAAwB,MAApBH,EAASC,OAIjB,MAHA,EAAKR,SAAS,CACZnB,QAAS,IAEL6B,MAAM,iFAIfJ,MAAM,SAAAK,GACL,IAAMC,GAAO,IAAIxB,MAAOyB,iBAClBC,EAAeH,EAAKI,QAAQC,OAASL,EAAKI,QAAQC,OACxD,EAAKhB,UAAU,SAAAiB,GAAS,MAAK,CAC3BrD,KAAMgD,EACN/C,SAAU8C,EAAK9C,SACfC,QAAS6C,EAAKO,IAAIpD,QAClBC,KAAM4C,EAAKQ,KACXnD,QAAS2C,EAAKO,IAAIlD,QAClBC,OAAQ0C,EAAKO,IAAIjD,OACjBC,KAAMyC,EAAKS,KAAKlD,KAChBE,WAAYuC,EAAKS,KAAKhD,WACtBC,SAAUsC,EAAKS,KAAK/C,SACpBC,SAAUqC,EAAKS,KAAK9C,SACpBC,SAAUoC,EAAKS,KAAK7C,SACpBC,SAAUmC,EAAKS,KAAK5C,SACpBL,WAAYwC,EAAKU,KAAKC,MACtB5C,SAAUiC,EAAKU,KAAKE,IACpB9C,aAAckC,EAAKI,QAAQD,GAAcM,KACzCzC,oBAAqBgC,EAAKI,QAAQD,GAAcU,YAChD5C,OAAO,SAGV6C,OAAO,SAAAC,GACN,EAAK1B,SAAS,CACZpB,OAAO,EACPE,aAAc4C,Q,4CAKpB,WACE,OACE,sBAAKpC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMnC,MAAOwE,KAAK9B,MAAM1C,MAAOE,OAAQsE,KAAK7B,kBAAmBtC,MAAOmE,KAAKzB,kBAC3E,cAAC,EAAD,CAAQvC,IAAKgE,KAAK9B,e,GAzFR+B,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.792608e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TopPanel.css'\r\n\r\nconst TopPanel = () => {\r\n    return ( \r\n        <nav>\r\n            <h1>Weather App by Bartosz ZiÄ™cina</h1>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default TopPanel;","import React from 'react';\r\nimport './Form.css'\r\n\r\nconst Form = props => {\r\n    return ( \r\n        <form>\r\n            <input type=\"text\" value={props.value} onChange={props.change} placeholder=\"enter a city name...\"/>\r\n            <button onClick={props.click}>Enter</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n    const {value, date, timezone, country, city, sunrise, sunset ,temp ,feels_like ,temp_min ,temp_max ,humidity ,pressure ,wind_speed ,wind_deg ,weather_main ,weather_description ,error, errorId, errorMessage } = props.all\r\n    let content = null\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n      }\r\n    if(!error && city){\r\n        const celcTemp = Math.round(temp - 273.15)\r\n        const sunriseTime = new Date((sunrise + timezone - 7200)  * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date((sunset + timezone - 7200) * 1000).toLocaleTimeString();\r\n        const windKM = Math.round((wind_speed / 1000) * 3600)\r\n        content = (\r\n            <div className=\"result\">\r\n            <h3>Search results for <em>{capitalizeFirstLetter(city)}</em> ({country})</h3>\r\n            <h4>The current day and time: {date}</h4>\r\n            <h4>Temperature: {celcTemp}&#176;C </h4>\r\n            <h4>Weather conditions: {weather_main}, details: {weather_description}</h4> \r\n            <h4>Wind speed: {windKM} km/m</h4>\r\n        </div>\r\n        )\r\n    }\r\n    return ( \r\n        <>\r\n             {errorId ? <p className=\"errorMessage\">{errorMessage.message} <span className=\"errorTitle\">{value}</span></p> : content}\r\n        </>\r\n     );\r\n}\r\n\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport TopPanel from './TopPanel';\nimport Form from './Form'\nimport Result from './Result'\nimport './App.css';\n\n// API from https://home.openweathermap.org\nconst ApiKey = \"c84b8f5c077147fb55d9a448295d1fe7\"\n\nclass App extends Component {\n  state = { \n    value: '',\n    date: '',\n    timezone: '',\n    country: '',\n    city: '',\n    sunrise: '',\n    sunset: '', \n    temp: '',\n    feels_like: '',\n    temp_min: '',\n    temp_max: '',\n    humidity: '',\n    pressure: '', \n    wind_speed: '',\n    wind_deg: '',\n    weather_main: '',\n    weather_description: '',\n    error: false,\n    errorId: '',\n    errorMessage: ''\n   }\n\n\n  handleValueChange = e => {\n    this.setState({\n      value: e.target.value,\n      errorId: ''\n    })\n  }\n\n  handleCityClick = e => {\n    e.preventDefault()\n    const city = this.state.value\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${ApiKey}`\n    fetch(API)\n    .then( response => {\n      if(response.status === 200) {\n        return response.json()\n      }else if (response.status === 404){\n        this.setState({\n          errorId: 1\n        })\n        throw Error(`Incorrect city name`)\n      }else if (response.status === 500){\n        this.setState({\n          errorId: 2\n        })\n        throw Error(`The request was not completed due to an internal error on the server side.`)\n      }\n      \n      })\n    .then( data => {\n      const time = new Date().toLocaleString()\n      const weatherIndex = data.weather.length - data.weather.length\n      this.setState( prevState => ({\n        date: time,\n        timezone: data.timezone,\n        country: data.sys.country,\n        city: data.name,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset, \n        temp: data.main.temp,\n        feels_like: data.main.feels_like,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        pressure: data.main.pressure, \n        wind_speed: data.wind.speed,\n        wind_deg: data.wind.deg,\n        weather_main: data.weather[weatherIndex].main,\n        weather_description: data.weather[weatherIndex].description,\n        error: false\n      }))\n    })\n    .catch (err => {\n      this.setState({\n        error: true,\n        errorMessage: err\n      })\n    })\n  }\n\n  render() { \n    return ( \n      <div className=\"app\">\n        <TopPanel />\n        <Form value={this.state.value} change={this.handleValueChange} click={this.handleCityClick}/>\n        <Result all={this.state}/>\n      </div>\n     );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}